* Planning is hugely beneficial
* Stores data to solve specific problems
    1. Size/amount of data - Scalable
    2. Ease of updating data - Accessible
    3. Accuracy - Accurate
    4. Security - Secure
    5. Redundancy - Consistent
    6. Importance - Permanent

* Database Management Systems (DBMS) ie. MySQL, Oracle, PostgreSQL, MongoDB
* One DBMS can manage multiple databases

== Planning ==
    * Use an elevated mission statement to identify the purpose of your database
    * Gather current data/materials if applicable
    * Assess current database setup if applicable

== Entities ==
    * A table representation of an object
    * Singular nouns for your tables i.e. customer, order, comment, paycheck
    * Entity relationships

== Attributes ==
    * Columns of an table are the entity attributes
    * Attributes should be as granular as possible
    * Columns data can allow null values
    * Naming convention is lax, use your preference (PascalCase)
    * Each attribute has a data type (i.e. character, date, integer)
        * These data types are much more specific than programming languages (i.e. tinyint, largeint)

== Keys ==
    * A way to identify a single row in a table
    * Uses a column of unique identifies
    * Called Primary Key (Synthetic Key, Surrogate Key)
    === Primary Key ===
        * Can occur naturally in the data (natural key) i.e. ISBN, Employee ID
        ==== Composite Key ====
            * Two values uniquely identify a row
    === Foreign Key ===
        * A key from another database
        * Does not have to be unique in the host database
    === Compound Key ===

== Relationships ==
    * One to Many relationship = One Customer -> Many Orders
    * Many to Many relationship can't be instantiated directly
        * Use junction/linking table to join two distinct related tables

== Transaction ==
    * A combined unit of work, either all actions happen, or none of them do
    * ACID - Atomic, Consistent, Isolated, Durable
    * Atomic - The transaction is indivisible, all actions must happen for it to exist
    * Consistent - The transaction can only make legitimate changes to the database
    * Isolated - The database is essentially locked while the transaction is taking place
    * Durability - If successful, the transaction is guaranteed
    * ACID is usually built into the DBMS

== SQL ==
    * Structured Query Language
    * Declarative Query Language
    * Use SQL to describe the outcome, the DBMS handles the actions
    * Returns a set for your query

== CRUD ==
    * Create
    * Read
    * Update
    * Delete

== Other Database Types ==
