= Basics =
    * Concurrent
    * Class based
    * Object-Oriented
    * Write Once, Run Anywhere
    
    == Package ==
        * Organizes java classes into namespaces
        * Provides a unique namespace
        * Can be stored in compressed files (JAR files)
        * Classes in the same package can access each others package-private and protected members
    
    == Object ==
        * Have states and behaviours.
        * Have references instead of names
        
        === This ===
            * 'This' keyword references the object of the current class
            * Used to differentiate between instance variables and local variables
        
        === Immutable Objects ===
            * State cannot be changed after it is constructed
            * Particularly useful in concurrent applications
    
    == Classes ==
        * A template that describes the behaviours and attributes of an object.
        * If defined in a package, the package statement should be the first statement in the source file
        * Import statements go between the package statement and the class declaration
        === Singleton Class ===
            * Used to control object creation, limiting the number of objects to only one.
            * Instance fields are equivalent to static fields.
    
    == Methods ==
        * A behaviour. A class can contain many methods.
        * Can pass a variable amount of arguments of the same type to a method with ...
        
        === Accessor Methods ===
            * Methods used to obtain information about an object. ie. length()
            * Getters
        
        === Mutator Methods ===
            * Methods used to modify information about an object
            * Setters
       
        === Static Methods ===
            * Can be invoked without creating an object
            * Use parameters instead of instance variables

        === Overloading ===
            * Multiple methods with the same name, but different parameters
    
        === Constructors ===
            * Every class has a constructor, if one is not defined a default one is provided by the java compiler.
            * Each time a new object is created at least one constructor will be invoked.
            * A class can have more than one constructor
            * Same name as the class.
            * No return type.

        === Finalize() ===
            * Used to ensure that an object terminates properly
            * To add finalize to a class define finally()
            * Inside finalize() is where actions are performed before collection
            * You cannot know if or when finalize will be executed
 
    == Modifiers ==
        === Access Modifiers ===
            * Default is visible to the package
            ==== Public ====
                * Visible to the world
            ==== Private ====
                * Visible to the class only
            ==== Protected ====
                * Visible to the package and all subclasses

        === Non-Access Modifiers ===
            ==== Static ====
                * Class methods and variables
            ==== Final ====
                * Finalizing the implementations of classes, methods, and variables
            ==== Abstract ====
                * For creating abstract classes and methods
            ==== Synchronized ====
            ==== Volatile ====

    == Loops ==
        * While
        * For
        * Do...while (Tests condition after the first loop)
        * Break (Terminates the loop/switch)
        * Continue (Skip the rest of the statement and start the loop again)
        * Enhanced for loop:
            * for(declaration : expression){ statements }

    == Control ==
        * If/else
        * Switch statement
        * ?: (Ternary/Conditional operator)

    == Variables ==
        
        === Instance Variable ===
            * Each object created will have a unique set of variables
            * Defined within a class, but outside of any method
            * Initialized when the class is instantiated
            * Can be accessed by any method, constructor or block of that class
            * Access modifiers can be used for instance variables
            * Have default values (int = 0, bool = false, object reference = null)
        
        === Local Variables ===
            * Defined inside methods, constructors or blocks
            * Only exists within the scope of the method
            * Access modifiers cannot be used for local variables
            * Local variables have no default value
        
        === Class Variables / Static Variables ===
            * Defined within a class outside of any method with the static keyword
            * One copy of each class variable regardless of the number of objects created
            * Can be accessed with ClassName.VariableName
            * Can be declared final to make it unchangeable
    
    == Primitive Data Types ==
        - Do not need the 'new' keyword for initialization
        * Byte:
            * 8-bit signed two's complement integer
            * Minimum value of -128, max of 127
            * Default value: 0
        * Short:
            * 16-bit signed two's complement integer
            * Minimum value of -32768, max of 32767
            * Default value: 0
        * Int:
            * 32-bit signed two's complement integer
            * Minimum value of -2^31, max of 2^31 - 1
            * Default value: 0
        * Long:
            * 64-bit two's complement integer
            * Signed long has minimum -2^63, max of 2^63 - 1
            * Default value: 0L
        * Float:
            * Single-precision 32-bit floating point
            * Decimal number
            * Default value: 0.0f
        * Double:
            * Double-precision 64-bit floating point
            * Decimal number
            * Default value: 0.0d
        * Boolean:
            * Two possible values (true/false)
            * Default value: false
        * Char:
            * Single 16-bit Unicode character
            * Default value: '\u0000'
    == Operators ==
        === Arithmetic ===
            * + (Addition)
            * - (Subtraction)
            * * (Multiplication)
            * / (Division)
            * % (Modulus)
            * ++ (Increment)
            * -- (Decrement)

        === Relational ===
            * == (Equal to)
            * != (Not equal to)
            * > (Greater than)
            * "$Lessthan" (Less than)
            * >= (Greater than or equal to)
            * "$Lessthan"= (Less than or equal to)

        === Bitwise ===
            * Can be applied to integer types; int, long, short, char, and byte.
            * & (Bitwise and)
            * | (Bitwise or)
            * ^ (Bitwise XOR)
            * ~ (Bitwise compliment)
            * << (Bitwise left shift)
            * >> (Bitwise right shift)
            * >>> (Zero fill right shift)

        === Logical ===
            * && (Logical and)
            * || (Logical or)
            * ! (Logical not)

        === Assignment ===
            * = (Simple assignment)
            * += (Add AND assignment)
            * -= (Subtract AND assignment)
            * *= (Multiply AND assignment)
            * /= (Divide AND assignment)
            * %= (Modulus AND assignment)
            * <<= (Left shift AND assignment)
            * >>= (Right shift AND assignment)
            * &= (Bitwise AND assignment)
            * ^= (Bitwise XOR AND assignment)
            * |= (Bitwise IOR AND assignment)

        === Misc ===
            * ?: (Conditional/Ternary):
                * Consists of three operands and is used to evaluate Boolean expressions
                * b = (a == 1) ? 20 : 30
            * Instance Operator:
                * Used for object reference variables
                * Checks whether the object is of a particular type
                * ( Object reference variable ) instanceof (class/interface type)

    == Wrapping Numbers/Chars/Strings/Arrays ==
        * Classes that encapsulate types (including primitives)
        * Allows these types to be used as objects

    == Strings ==
        * String literals are converted into objects by way of one of 11 constructors
        * Immutable
        * If strings need to be modified, use String Buffer and String Builder
        * Can be concatenated with +
        * Printf and format()

    == Regex ==
        * Pattern Class
        * Matcher Class
        * Pattern Syntax Exception Class
            String textToRegex = "Some text to search.";
            String regie = "(.*)(\\d+)(.**)";
            Pattern p = Pattern.compile(regie);
            Matcher m = p.matcher(textToRegex)
            m.find()

    == Files/IO ==
        === Streams ===
            * InputStream used to read data from a source
            * OutputStream used to write data to destination
            * Byte streams (FileInputStream, FileOutputStream)
            * Char stream (FileReader, FileWriter)
            * Standard stream (Input from keyboard (System.in), output on screen (System.out), errors (System.err))
        === File Structure Functions ===
            * mkdir() / mkdirs()
            * list()

    == Exceptions ==
        * Checked exceptions occur at compile time and should be dealt with by the programmer
        * Unchecked exceptions occur at runtime and are typically bugs or logic errors
        * All exception classes are subclasses of the java.lang.Exception class
        * java.lang.Exception is a subclass of the Throwable class
        * public String getMessage() returns a string about the exception that occurred
        * Try / Catch / Finally
        * throw is used to invoke an exception
        * throws is used to postpone handling of a checked exception

    == Applet ==
        * No main() method
        * Application running embedded in a webpage
        * Applet class provides standard interface between the applet and its environment
        * Cannot access local system data
        * Inherently untrusted
        * Easy execution through a browser
        * Maybe easier gui construction (don't have to code size, window closing code)
        * Cannot create socket connections

    == General ==
        * Comment with // (Single) or /* */ (Multi-line)
        * Case sensitive
        * Names for classes, variables, and methods are called identifiers
            * Identifiers should begin with a letter, $, or _
            * A keyword cannot be used as an identifier
        * Class naming:
            * First letter is upper case
            * Subsequent words are capitalized ie. class MyJavaClass
        * Method naming:
            * First letter is lower case
            * Subsequent words are capitalized ie. public void myJavaMethod()
        * Program file naming:
            * Filename must match the public class name
                * Can have multiple inner classes, but only one public class per file
        * Modifiers:
            * Access:
                * Default:
                * Public:
                * Protected:
                * Private:
            * Non-Access:
                * Final:
                * Abstract:
                * Strictfp
        * Variables: Local, Class Variables (Static Variables), Instance Variables (Non-Static Variables)
        * Enum: Special data type that enables a variable to be a set of predefined constants. Constant names are in all uppercase.
        * Interface: A contract between objects on how to communicate with each other. Vital to inheritance.
        * Primitive types are passed by value, not reference
        * Object references are passed by value (objects are not passed by reference)

 
= Advanced =
    == Multi-threading ==
        * States of a thread:
            1. New - New Thread() - A new thread is created
            2. Runnable - Start() - After creation
            3. Running - run() - Executing its task
            4. Waiting - Sleep(), Wait() - Waiting while another thread finishes
            5. Dead - Thread completes its task or is terminated

        * Priorities: Every thread provides a priority to the scheduler:
            * MIN_PRIORITY = 1
            * NORM_PRIORITY (default) = 5
            * MAX_PRIORITY = 10

        * Setup:
            1. Implement a run() method provided by a Runnable interface (Logic goes here)
            2. Instantiate a Thread object using Thread(Runnable threadObj, String threadName)
                * Where threadObj is an instance of a class that implements the Runnable interface
            3. Start the thread with start()

        * Synchronization:
            * Each object in java is associated with a monitor, which can be locked or unlocked
            * Only one thread may hold a lock on an object at one time
            * Use synchronized blocks

    == Serialization ==
        * Conversion of objects to a series of bytes for transmission or storage
        * Implement the Serializable interface
        * Use ObjectOutputStream on the object that implements Serializable
        * Use ObjectInputStream to Deserialize

    == Generics ==
        * Specify with a single method declaration, a set of related methods
        * Specify with a single class declaration, a set of related types
        * Provide compile-time type safety

= Specifics =
    == toString ==
        * If you define a toString method in your class, the object can be passed to println
