* To intentionally group several variables together and treat them as one unit

== C-style Struct ==
    * Basically an object with instance variables
    * They are value types unlike objects
    * Do not require instantiation like objects
    * Useful for very simple collections, such as coordinates or color information
    * A simple class in Java or Ruby, not available in Python

== Array ==
    * Definition:
        * Stores data elemets sequentially, commonly 0 based index
        * A fundamental data structure, very common usage
        * Usually zero-based index (starts at 1 in Lua)
    * Notes:
        * Good for indexing, poor at searching, inserting and deleting
    * Examples:
        * Associative Array:
            * Pairs of keys, and values
            * Like a dictionary in python or hash map in Java
            * Implemented with a hash table
        * Linear Array:
            * One dimensional array, very basic
            * Static in size
        * Dynamic Array:
            * Copies data into new larger array when full
        * Multi Dimensional Array:
            * Uses multiple indices (ie. x and y)
        * Jagged Array:
            * Multi dimensional array with inner arrays of differing sizes
    * Efficiency:
        * Index:
            * Linear: O(1)
            * Dynamic: O(1)
        * Search:
            * Linear: O(n)
            * Dynamic: O(n)
        * Optimized Search:
            * Linear: O(log n)
            * Dynamic: O(log n)
        * Insert:
            * Linear: n/a
            * Dynamic: O(n)
        * Delete:
            * O(n)

== Linked List ==
    * Definition:
        * Stores data with nodes that point to other nodes
        * Each node has a datum and a reference to another node
        * A linked list chains nodes together by pointing each node to the next
    * Notes:
        * Designed to optimize insertion and deletion
        * Slow at indexing and searching
    * Examples:
        * Singly Linked List:
            * Only has a link to the next node
        * Doubly Linked List:
            * Each node has a reference to the previous and next node
        * Circularly Linked List:
            * A linked list where the last node(tail) references the first node(head)
    * Efficiency:
        * Index: O(n)
        * Search: O(n)
        * Optimized Search: (n)
        * Insert: O(1)
        * Delete: O(1)

== Hash Table / Hash Map ==
    * Definition:
        * Stores data with key/value pairs (dictionary)
        * Hash functions accept a key and return the output which is unique to that key
    * Notes:
        * Designed to optimize searching, insertion, and deletion
        * Hash collisions occur when a hash function returns the same output for two distinct inputs
        * A good hash function should map the expected inputs as evenly as possible over its output range
        * Hash functions are important for associative arrays and database indexing
    * Efficiency:
        * Index: O(1)
        * Search: O(1)
        * Insert: O(1)
        * Delete: O(1)

== Stack ==
    * Definition:
        * Good Explanation of Stack implementation with Linked List: http://btechsmartclass.com/DS/U2_T3.html
        * FILO (Last In Last Out)
        * Can be implemented with an array(size limited) or a linked list
        * Abstract Data Type (ADT)
    * Notes:
        * Push onto top
        * Pop top item off
        * Peek to see the top item
    * Efficiency:
        * Index: O(n)
        * Seach: O(n)
        * Insert: O(1)
        * Delete: O(1)

== Queue ==
    * Definition:
        * FIFO (First In First Out)
    * Notes:
        * Commonly used in multithreading and concurrency
        * Abstract Data Type (ADT)
        * Enqueue and Dequeue
    * Efficiency:
        * Index: O(n)
        * Seach: O(n)
        * Insert: O(1)
        * Delete: O(1)

== Binary Tree ==
    * Definition:
        * A tree like structure where every node has at most 2 children
        * There is one left and one right child node
    * Notes:
        * Designed to optimize searching and sorting
        * A degenerate tree is entirely one sided, and is essentially a linked list
        * A binary search tree is a binary tree where nodes are arranged in order, 
            * All elements in the left subtree are smaller than the node
            * All elements in the right subtree are larger than the node
    * Efficiency (Binary Search Tree):
        * Index: O(log n)
        * Search: O(log n)
        * Insert: O(log n)
        * Delete: O(log n)

== Binary Search Tree ==
    * A binary tree that stays sorted
    * Left node must always be less than the right node
    * Often used to sort key:value pairs
    * Cannot have duplicate keys
    * Not necessarily balanced
    * Often used behind the scenes for data structure implementations in languages

== Heap ==
    * A binary tree (not Binary Search Tree) that is always balanced
    * Appends items to the tree from top to bottom, left to right
    * Min heap (root is lowest value in set) or Max heap (root is highest value)?
    * Compares each added element to its parent, and swaps if necessary
    * Not fully sorted
    * Usefull as a priority queue, as the min/max is always the root

== Set ==
    * An unordered collection of objects
    * No index, key or sequence
    * No duplicates
    * Fast lookups due to using the object as a hash in a hash table
    * You must know the object you are looking for ie. checking for membership in a set
    * Implemented with a binary search tree in C++

== Graph ==
    * A collection of nodes where any node can link to any other node and multiple nodes
    * Describes complex systems of interconnected points
    * In graph theory nodes are called vertices
    * Links between vertices are called edges
    * Single linked graph = directed graph
    * Double linked graph = undirected graph
    * Each edge can have a weight assigned

